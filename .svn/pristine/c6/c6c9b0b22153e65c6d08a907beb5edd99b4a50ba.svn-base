#include "GeneralCPPTest.h"
#include <bitset>
#include <locale>
#include <iostream>
#include <tchar.h>
#include <sstream>
#include "..\..\GeneralCPP\SimpleDataObject.h"
#include "..\..\GeneralCPP\Timer.h"
#include "..\..\GeneralCPP\IStrategy.h"
#include "..\..\GeneralCPP\Strategy1.h"
#include "..\..\GeneralCPP\Strategy2.h"
#include "..\..\GeneralCPP\Strategy3.h"
#include "..\..\GeneralCPP\Strategy4.h"
#include "..\..\GeneralCPP\ExampleInheritanceDerivedOne.h"
#include "..\..\GeneralCPP\ExampleInheritanceBase.h"
#include "..\..\GeneralCPP\Evaluator.h"

using namespace std;

CGeneralCPPTest::CGeneralCPPTest(void)
{
}


CGeneralCPPTest::~CGeneralCPPTest(void)
{
}

TEST(CNGConfigFunctionTest, TestPerformance) 
{
	CTimer timer;
	ostringstream pippo;
	
	int iteration = 100000;

	timer.Start();
	for(int i=0; i< iteration; i++)
	{
		double val1 = i*2.3;
		double val2 = i*4.7;
		double val3 = i*5.378;
		pippo << val1 << "|" << val2 << "|" << val3 << endl;
	}
	timer.Stop();

	char buffer1[100];
	char buffer2[100];
	char buffer3[100];
	timer.Start();
	for(int i=0; i< iteration; i++)
	{
		double val1 = i*2.3;
		double val2 = i*4.7;
		double val3 = i*5.378;
		sprintf_s(buffer1,"%g",val1);
		sprintf_s(buffer2,"%g",val2);
		sprintf_s(buffer3,"%g",val3);
	}
	timer.Stop();

	
}

TEST(CNGConfigFunctionTest, TestHash) 
{
	//setlocale( LC_ALL, "English" ); 

	locale loc;
  
	int len = 3;
	double p1[3] = {2.5,0.7,1.0};
	double p2[3] = {2.5,0.7,1.5};

   string s1,s2;
   
   s1.assign((char*)&p1,len*sizeof(double));
   s2.assign((char*)&p2,3*sizeof(double));

   long r1 = use_facet< collate<_TCHAR> > ( loc ).hash (s1.data(), s1.data()+s1.length());
   long r2 =  use_facet< collate<_TCHAR> > ( loc ).hash (s2.data(), s2.data()+ s2.length());


   CSimpleDataObject o1(2.5, 0.7, 1.0, 0, 7);
   CSimpleDataObject o2(2.5, 0.7, 1.5, 0, 0);
   string s3,s4;
   char *c1 = (char*)&p1;
   char *c2 = (char*)&p2;
   s3.assign((_TCHAR*)&o1,sizeof(CSimpleDataObject));
   s4.assign((_TCHAR*)&o2,sizeof(CSimpleDataObject)); 

   string s5 = s3+s4;
   string s6 = s4+s3;

   for(int i =0;i< (int)s5.size(); i++)
   {
	   if(s5[i]!=s6[i])
	   {
		   printf("Trovato carattere diverso %c %c posizione %d\n",s5[i],s6[i],i);
	   }
   }

   long r3 = use_facet< collate<_TCHAR> > ( loc ).hash (s3.data(), s3.data()+s3.length());
   long r4 =  use_facet< collate<_TCHAR> > ( loc ).hash (s4.data(), s4.data()+ s4.length());
   long r5 =  use_facet< collate<_TCHAR> > ( loc ).hash (s5.data(), s5.data()+ s5.length());
   long r6 =  use_facet< collate<_TCHAR> > ( loc ).hash (s6.data(), s6.data()+ s6.length());



   char b1[100];
   char b2[100];
   sprintf_s(b1,"%f%f%f",p1[0], p1[1], p1[2]);
   sprintf_s(b2,"%f%f",p2[0], p2[1]);
   string s7(b1);
   string s8(b2);
   long r7 =  use_facet< collate<_TCHAR> > ( loc ).hash (s7.data(), s7.data()+ s7.length());
   long r8 =  use_facet< collate<_TCHAR> > ( loc ).hash (s8.data(), s8.data()+ s8.length());
      
}


TEST(CNGConfigFunctionTest, TestBitWise) 
{
	int value = 0x00;
	int bitwise1 = 0x00000001; //1 
	int bitwise2 = 0x00000010; //16
	int bitwise3 = 0x00000100; // 256
	
	value = 257;
	printf("value %d bitwise1 = %d \n", value, (value&bitwise1)==bitwise1);
	printf("value %d bitwise2 = %d \n", value, (value&bitwise2)==bitwise2);
	printf("value %d bitwise3 = %d \n", value, (value&bitwise3)==bitwise3);

	if(!((value&bitwise2)==bitwise2))
		value = value + bitwise2;
	printf("value %d bitwise2 = %d \n", value, (value&bitwise2)==bitwise2);

}

TEST(CNGConfigFunctionTest, TestSwitchCase) 
{
	int cmd = 2;
	float a = 4;
	float b = 2;
	float ret = 0;

	switch (cmd)
	{
		case 1:
			ret = a+b;
		break;
		case 2:
			ret = a-b;
		break;
		case 3:
			ret = a*b;
		break;
		case 4:
			if(b!=0)
				ret = a/b;
			else
				ret = 0;
		break;
		default:
			ret = 0;
	}

	printf("scelta %d): risultato = %f\n", cmd, ret);
}

TEST(CNGConfigFunctionTest, TestSwitchCaseRef) 
{
	int cmd = 1;
	float a = 4;
	float b = 2;
	float ret = 0;

	IStrategy *strategy = new Strategy1();
	strategy->DoAction(a, b, ret);
	printf("scelta %d): risultato = %f\n", cmd, ret);
	delete strategy;	
}

TEST(CNGConfigFunctionTest, TestInheritance) 
{
	ExampleInheritanceBase exampleBase;
	ExampleInheritanceDerivedOne exampleIhneritanceOne;

	int outPar1;
	exampleBase.CalcRangeNumbers(outPar1, 27);
	ASSERT_EQ(outPar1,27);

	exampleIhneritanceOne.CalcRangeNumbers(outPar1, 59);
	ASSERT_EQ(outPar1,5);

	
}

TEST(CNGConfigFunctionTest, TestEvaluator) 
{
	Evaluator evaluator;
	ExampleInheritanceBase exampleBase;
	ExampleInheritanceDerivedOne exampleDerivedOne;
	int retVal = evaluator.CalcParameter(exampleBase);
	ASSERT_EQ(retVal, 26);

	retVal = evaluator.CalcParameter(exampleDerivedOne);
	ASSERT_EQ(retVal, 5);
}
	