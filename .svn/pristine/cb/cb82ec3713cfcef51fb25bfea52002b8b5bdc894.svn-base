#include "StdAfx.h"
#include "CryptHashingOperation.h"


CCryptHashingOperation::CCryptHashingOperation(void)
{
}


CCryptHashingOperation::~CCryptHashingOperation(void)
{
}


PUCHAR CCryptHashingOperation::CreateHash(BYTE rgbMsg[])
{
	BCRYPT_ALG_HANDLE phAlgorithm;
	DWORD dwFlags = 0;
	BCRYPT_HASH_HANDLE phHash = NULL;
	PUCHAR pbHashObject = NULL;
    PBYTE pbHash = NULL;


	ULONG cbHashObject;
	DWORD cbData = 0;
	DWORD cbHash = 0;
	NTSTATUS res;


	res = BCryptOpenAlgorithmProvider(&phAlgorithm, BCRYPT_MD5_ALGORITHM, MS_PRIMITIVE_PROVIDER, dwFlags);

	
	 //calculate the size of the buffer to hold the hash object
    res = BCryptGetProperty(phAlgorithm, BCRYPT_OBJECT_LENGTH, (PBYTE)&cbHashObject, sizeof(DWORD), &cbData, 0);

    //allocate the hash object on the heap
    pbHashObject = (PBYTE)HeapAlloc (GetProcessHeap (), 0, cbHashObject);
    if(NULL == pbHashObject)
    {
        wprintf(L"**** memory allocation failed\n");
    }

   //calculate the length of the hash
    res = BCryptGetProperty(phAlgorithm, BCRYPT_HASH_LENGTH, (PBYTE)&cbHash, sizeof(DWORD), &cbData, 0);
    
    //allocate the hash buffer on the heap
    pbHash = (PBYTE)HeapAlloc (GetProcessHeap (), 0, cbHash);
    if(NULL == pbHash)
    {
        wprintf(L"**** memory allocation failed\n");
    }

	res = BCryptCreateHash(phAlgorithm, &phHash, pbHashObject,cbHashObject,NULL,0,0);


	res = BCryptHashData(phHash, (PBYTE)rgbMsg, sizeof(rgbMsg),0);
    
    //close the hash
    res = BCryptFinishHash(phHash, pbHash, cbHash, 0);

	
    if(phAlgorithm)
    {
        BCryptCloseAlgorithmProvider(phAlgorithm,0);
    }

    if (phHash)    
    {
        BCryptDestroyHash(phHash);
    }

    if(pbHashObject)
    {
        HeapFree(GetProcessHeap(), 0, pbHashObject);
    }

    return pbHash;

}
