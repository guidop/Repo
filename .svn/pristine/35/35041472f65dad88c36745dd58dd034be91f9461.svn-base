#include "HashingTest.h"
#include <windows.h>
#include <iostream>
#include "..\..\CNG\CryptHashingOperation.h"
#include "..\..\GeneralCPP\Timer.h"


using namespace std;

CHashingTest::CHashingTest(void)
{
}


CHashingTest::~CHashingTest(void)
{
}

TEST(CHashingTest, CalculateMD5Hash) 
{	
	wstring rgbMsg(L"abb");
	PUCHAR resultHash;
	wstring hashAlgType = BCRYPT_MD5_ALGORITHM;
	int digestLength = 16;
	CCryptHashingOperation cryptHashOperation;

	resultHash =  cryptHashOperation.CreateHash(rgbMsg, hashAlgType);
	wstring resultHashToString = cryptHashOperation.ConvertHashDigestToString(resultHash,digestLength);
	
	if(resultHash)
	{
		HeapFree(GetProcessHeap(), 0, resultHash);
	}

	ASSERT_EQ(resultHashToString,L"ea01e5fd8e4d8832825acdd20eac5104");
}


TEST(CHashingTest, CalculateSHA1Hash) 
{	
	wstring rgbMsg(L"abb");
	PUCHAR resultHash;
	wstring hashAlgType = BCRYPT_SHA1_ALGORITHM;
	int digestLength = 20;
	CCryptHashingOperation cryptHashOperation;
	
	resultHash =  cryptHashOperation.CreateHash(rgbMsg, hashAlgType);	
	wstring resultHashToString = cryptHashOperation.ConvertHashDigestToString(resultHash,digestLength);
	
	if(resultHash)
	{
		HeapFree(GetProcessHeap(), 0, resultHash);
	}

	ASSERT_EQ(resultHashToString,L"c64d3fcde20c5cd03142171e5ac47a87aa3c8ace");
}


TEST(CHashingTest, CalculateSHA256Hash) 
{	
	wstring rgbMsg(L"abb");
	PUCHAR resultHash;
	wstring hashAlgType = BCRYPT_SHA256_ALGORITHM;
	int digestLength = 32;
	CCryptHashingOperation cryptHashOperation;
	
	resultHash =  cryptHashOperation.CreateHash(rgbMsg, hashAlgType);	
	wstring resultHashToString = cryptHashOperation.ConvertHashDigestToString(resultHash,digestLength);
	
	if(resultHash)
	{
		HeapFree(GetProcessHeap(), 0, resultHash);
	}

	ASSERT_EQ(resultHashToString,L"715edf8ba8729420cd4d1ce85ed61954a9f531f8c548df728c407effe839296d");
									                  
								   
}


TEST(CHashingTest, CalculateSHA384Hash) 
{	
	wstring rgbMsg(L"abb");
	PUCHAR resultHash;
	wstring hashAlgType = BCRYPT_SHA384_ALGORITHM;
	int digestLength = 48;
	CCryptHashingOperation cryptHashOperation;
	
	resultHash =  cryptHashOperation.CreateHash(rgbMsg, hashAlgType);	
	wstring resultHashToString = cryptHashOperation.ConvertHashDigestToString(resultHash,digestLength);
	
	if(resultHash)
	{
		HeapFree(GetProcessHeap(), 0, resultHash);
	}

	ASSERT_EQ(resultHashToString,L"b3a671398773967b17dfac229541179c1dc47289bc666aa0cf63fb746e2e9af4f3835f689ab1cad580ddaa6167a2c1fd");
}

TEST(CHashingTest, CalculateSHA512Hash) 
{	
	wstring rgbMsg(L"abb");
	PUCHAR resultHash;
	wstring hashAlgType = BCRYPT_SHA512_ALGORITHM;
	int digestLength = 64;
	CCryptHashingOperation cryptHashOperation;
	
	resultHash =  cryptHashOperation.CreateHash(rgbMsg, hashAlgType);	
	wstring resultHashToString = cryptHashOperation.ConvertHashDigestToString(resultHash,digestLength);
	
	if(resultHash)
	{
		HeapFree(GetProcessHeap(), 0, resultHash);
	}

	ASSERT_EQ(resultHashToString,L"198ec4853b4fa11a26a55c9d6ac1d06e6af9401772906c4313a0d39b31891ad07860379d699c28f3840ec26b1f3e1ce33448e095496b6299ffe8fc090d71fff6");
}